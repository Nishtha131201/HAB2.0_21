<script src="//mozilla.github.io/pdf.js/build/pdf.js"></script>
<style>
  .btn {
    background: coral;
    color: #fff;
    border: none;
    outline: none;
    cursor: pointer;

  }

  .btn:hover {
    opacity: 0.9;
  }

  /* .page-info {} */

  .error {
    background: orangered;
    color: #fff;
    padding: 1rem;
  }
</style>

<section id="ordinance">
  <div class=" container mx-auto md:px-44 px-12 pt-10">
    <div class="grid justify-items-stretch">
      <div class="justify-self-auto">
        <h1>Ordinance and Rules</h1>

        <div>
          &nbsp; &nbsp;
          <span class="page-info">Page: <span id="page_num"></span> / <span id="page_count"></span></span>
        </div>

        <div class="flex ">
          <button class="btn justify-start h-10 px-2 py-2" id="prev">Previous</button>
          <canvas id="the-canvas" data-url="/notices/60377d882cbf8f3fd8d1a455" style="border: 1px solid black;
          direction: ltr;"></canvas>
          <button class="btn justify end h-10 px-2 py-2" id="next">Next</button>
        </div>
      </div>
    </div>

  </div>



  <script>
    const url = document.querySelector("#the-canvas").dataset.url;
    var pdfjsLib = window['pdfjs-dist/build/pdf'];
    pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';
    var currPage = 1; //Pages are 1-based not 0-based
    var numPages = 0;
    var thePDF = null;

    //This is where you start
    pdfjsLib.getDocument(url).then(function (pdf) {



      //Set PDFJS global object (so we can easily access in our page functions
      thePDF = pdf;

      //How many pages it has
      numPages = pdf.numPages;

      //Start with first page
      pdf.getPage(1).then(handlePages);
    });



    function handlePages(page) {
      //This gives us the page's dimensions at full scale
      var viewport = page.getViewport(1);

      //We'll create a canvas for each page to draw it on
      var canvas = document.createElement("canvas");
      canvas.style.display = "block";
      var context = canvas.getContext('2d');
      canvas.height = viewport.height;
      canvas.width = viewport.width;

      //Draw it on the canvas
      page.render({ canvasContext: context, viewport: viewport });

      //Add it to the web page
      document.body.appendChild(canvas);

      //Move to next page
      currPage++;
      if (thePDF !== null && currPage <= numPages) {
        thePDF.getPage(currPage).then(handlePages);
      }
    }
    // const url = document.querySelector("#the-canvas").dataset.url;
    // var pdfjsLib = window['pdfjs-dist/build/pdf'];
    // pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';

    // var pdfDoc = null,
    //   pageNum = 1,
    //   pageRendering = false,
    //   pageNumPending = null,
    //   scale = 1.25,
    //   canvas = document.getElementById('the-canvas'),
    //   ctx = canvas.getContext('2d');


    // function renderPage(num) {
    //   pageRendering = true;
    //   pdfDoc.getPage(num).then(function (page) {
    //     var viewport = page.getViewport({ scale: scale });
    //     canvas.height = viewport.height;
    //     canvas.width = viewport.width;

    //     var renderContext = {
    //       canvasContext: ctx,
    //       viewport: viewport
    //     };
    //     var renderTask = page.render(renderContext);

    //     renderTask.promise.then(function () {
    //       pageRendering = false;
    //       if (pageNumPending !== null) {
    //         renderPage(pageNumPending);
    //         pageNumPending = null;
    //       }
    //     });
    //   });

    //   document.getElementById('page_num').textContent = num;
    // }

    // function queueRenderPage(num) {
    //   if (pageRendering) {
    //     pageNumPending = num;
    //   } else {
    //     renderPage(num);
    //   }
    // }

    // function onPrevPage() {
    //   if (pageNum <= 1) {
    //     return;
    //   }
    //   pageNum--;
    //   queueRenderPage(pageNum);
    // }
    // document.getElementById('prev').addEventListener('click', onPrevPage);

    // function onNextPage() {
    //   if (pageNum >= pdfDoc.numPages) {
    //     return;
    //   }
    //   pageNum++;
    //   queueRenderPage(pageNum);
    // }
    // document.getElementById('next').addEventListener('click', onNextPage);

    // pdfjsLib.getDocument(url).promise.then(function (pdfDoc_) {
    //   pdfDoc = pdfDoc_;
    //   document.getElementById('page_count').textContent = pdfDoc.numPages;

    //   renderPage(pageNum);
    // });
  </script>

</section>